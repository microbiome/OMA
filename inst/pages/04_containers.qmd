# Microbiome Data {#sec-containers}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
chapterPreamble()
```

## Data science framework

The building blocks of the framework are **data container**
(SummarizedExperiment and its derivatives), **packages** from various
developers using the `TreeSE` container, open **demonstration data
sets**, in a separate chapter [@sec-example-data], and **online
tutorials** including this online book as well as the various package
vignettes and other materials.

```{r echo=FALSE}
knitr::include_graphics("images/FigureOverviewV2_mod.png")
```

## Data containers

`SummarizedExperiment` (`SE`) [@R_SummarizedExperiment] is a generic and highly optimized container for complex data
structures. It has become a common choice for analysing various types
of biomedical profiling data, such as RNAseq, ChIp-Seq, microarrays,
flow cytometry, proteomics, and single-cell
sequencing.

[`TreeSummarizedExperiment`] (`TreeSE`) [@R_TreeSummarizedExperiment] was developed as an extension to incorporate hierarchical
information (such as phylogenetic trees and sample hierarchies) and
reference sequences.

[`MultiAssayExperiment`] (`MAE`) [@Ramos2017] provides an organized
way to bind several different data containers together in a single
object. For example, we can bind microbiome data (in `TreeSE`
container) with metabolomic profiling data (in `SE`) container, with
(partially) shared sample metadata. This is convenient and robust for
instance in subsetting and other data manipulation tasks. Microbiome
data can be part of multiomics experiments and analysis strategies. We
highlight how the methods used througout in this book relate to this
data framework by using the `TreeSE`,
`MAE`, and classes beyond.

This section provides an introductions to these data containers. In
microbiome data science, these containers link taxonomic abundance
tables with rich side information on the features and
samples. Taxonomic abundance data can be obtained by 16S rRNA amplicon
or metagenomic sequencing, phylogenetic microarrays, or by other
means. Many microbiome experiments include multiple versions and types
of data generated independently or derived from each other through
transformation or agglomeration. We start by providing recommendations
on how to represent different varieties of multi-table data within the
`TreeSE` class.

The options and recommendations are summarized in [@tbl-options].

### Assay data {#sec-assay-slot}

The original count-based taxonomic abundance tables may have different 
transformations, such as logarithmic, Centered Log-Ratio (CLR), or relative 
abundance. These are typically stored in _**assays**_.

Let us load example data and rename it as tse.

```{r}
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns
```

The `assays` slot contains the experimental data as multiple count matrices. The result of `assays` is a list of matrices.

```{r}
assays(tse)
```

Individual assays can be accessed via `assay`

```{r}
assay(tse, "counts")[1:5,1:7]
```

To illustrate the use of multiple assays, the relative abundance data can be 
calculated and stored along the original count data using `transformAssay`.

```{r}
tse <- transformAssay(tse, assay.type = "counts", method = "relabundance")
assays(tse)
```

Now there are two assays available in the `tse` object, `counts` and 
`relabundance`.

```{r}
assay(tse, "relabundance")[1:5,1:7]
```

Here the dimension of the count data remains unchanged in
transformation. This is in fact, a requirement for the assays.

### colData

`colData` contains data on the samples.

```{r coldata}
colData(tse)
```

### rowData

`rowData` contains data on the features of the analyzed samples. Of particular
interest to the microbiome field, this is used to store taxonomic information.

```{r rowdata}
rowData(tse)
```

### rowTree  

Phylogenetic trees also play an important role in the microbiome field. The 
`TreeSE` class can keep track of features and node
relations via two functions, `rowTree` and `rowLinks`.

A tree can be accessed via `rowTree` as `phylo` object.       
```{r rowtree}
rowTree(tse)
```

The links to the individual features are available through `rowLinks`.

```{r rowlinks}
rowLinks(tse)
```

Please note that there can be a 1:1 relationship between tree nodes and 
features, but this is not a must-have. This means there can be features, which
are not linked to nodes, and nodes, which are not linked to features. To change
the links in an existing object, the `changeTree` function is available.

### Alternative experiments {#sec-alt-exp}

_**Alternative experiments**_ complement _assays_. They can contain
complementary data, which is no longer tied to the same dimensions as
the assay data. However, the number of samples (columns) must be the
same.

This can come into play, for instance, when one has taxonomic
abundance profiles quantified with different measurement technologies,
such as phylogenetic microarrays, amplicon sequencing, or metagenomic
sequencing. Another common use case is including abundance tables for
different taxonomic ranks. Such alternative experiments concerning the
same set of samples can be stored as

1. Separate _assays_ assuming that the taxonomic information can be mapped 
between features directly 1:1; or 
2. Data in the _altExp_ slot of the `TreeSE`, if the feature 
dimensions differ. Each element of the _altExp_ slot is a `SE`
or an object from a derived class with independent feature data.

The following shows how to store taxonomic abundance tables
agglomerated at different taxonomic levels. However, the data could as
well originate from entirely different measurement sources as long as
the samples match.

Let us first agglomerate the data to Phylum level. This yields a new
`TreeSE` data object.

```{r altexp_agglomerate}
tse_phylum <- mergeFeaturesByRank(tse, "Phylum", na.rm=TRUE)
# Both have the same number of columns (samples)
dim(tse)
dim(tse_phylum)
```

Then we can add the new phylum-level data object as an alternative experiment in the original data.

```{r altexp_agglomerate2}
# Add the new data object to the original data object as an alternative experiment with the name "Phylum"
altExp(tse, "Phylum") <- tse_phylum

# Check the alternative experiment names available in the data
altExpNames(tse)
```

We can now subset the data, for instance, and this acts on both altExp and assay data.

```{r altexp_agglomerate3}
tse[,1:10]
dim(altExp(tse[,1:10],"Phylum"))
```

For more details on _altExp_, you can check the [introduction](https://bioconductor.org/packages/release/bioc/vignettes/SingleCellExperiment/inst/doc/intro.html) to the `SingleCellExperiment` package [@R_SingleCellExperiment].

### MAEs {#sec-mae}

_**Multiple experiments**_ relate to complementary measurement types,
such as transcriptomic or metabolomic profiling of the microbiome or
the host. Multiple experiments can be represented using the same
options as alternative experiments, or by using the
`MAE` class [@Ramos2017]. Depending on how the 
datasets relate to each other the data can be stored as:

1. Separate _altExp_ if the samples can be matched directly 1:1; or
2. As `MAE` objects, in which the connections between
samples are defined through a `sampleMap`. Each element on the
`experimentsList` of an `MAE` is `matrix` or
`matrix`-like objects, including `SE` objects, and 
the number of samples can differ between the elements.

<!--
```{r}
#TODO: Find the right dataset to explain a non 1:1 sample relationship
```
-->

For information have a look at the [intro vignette](https://bioconductor.org/packages/release/bioc/vignettes/MultiAssayExperiment/inst/doc/MultiAssayExperiment.html) of the `MultiAssayExperiment` package.  

 
   Option   Rows (features)    Cols (samples)               Recommended  
---------   --------------    ---------------  ------------------------
   assays  	     match              match       Data transformations  
   altExp             free              match    Alternative experiments  
MultiAssay            free      free (mapping)    Multi-omic experiments    

: **Recommended options for storing multiple data tables in microbiome studies** The _assays_ are best suited for data transformations (one-to-one match between samples and columns across the assays). The _alternative experiments_ are particularly suitable for alternative versions of the data that are of same type but may have a different number of features (e.g. taxonomic groups); this is for instance the case with taxonomic abundance tables agglomerated at different levels (e.g. genus vs. phyla) or alternative profiling technologies (e.g. amplicon sequencing vs. shallow shotgun metagenomics). For alternative experiments one-to-one match between samples (cols) is libraryd but the alternative experiment tables can have different numbers of features (rows). Finally, elements of the _MAE_ provide the most flexible way to incorporate multi-omic data tables with flexible numbers of samples and features. We recommend these conventions as the basis for methods development and application in microbiome studies. {#tbl-options}

## Demonstration data {#sec-example-data}

Open demonstration data for testing and benchmarking purposes is
available from multiple locations. This chapter introduces some
options. The other chapters of this book provide ample examples about
the use of the data.

### Package data {#sec-package-data}

The `mia` R package contains example datasets that are direct
conversions from the alternative `phyloseq` container to the
`TreeSE` container.

List the [available
datasets](https://microbiome.github.io/mia/reference/mia-datasets.html) in
the `mia` package:

```{r, message=FALSE}
library(mia)
data(package="mia")
```

Load the `GlobalPatterns` data from the `mia` package:

```{r, message=FALSE}
data("GlobalPatterns", package="mia")
GlobalPatterns
```

R packages contain additional demonstration data sets (see the Datasets section of the reference page):

* [mia reference](https://microbiome.github.io/mia/reference/index.html)
* [miaViz reference](https://microbiome.github.io/miaViz/reference/index.html)
* [miaTime reference](https://microbiome.github.io/miaTime/reference/index.html)

### ExperimentHub data

[ExperimentHub](https://bioconductor.org/packages/release/bioc/vignettes/ExperimentHub/inst/doc/ExperimentHub.html)
provides a variety of data resources, including the
[microbiomeDataSets](https://bioconductor.org/packages/release/data/experiment/html/microbiomeDataSets.html)
package [@Morgan2021; @microlahti2021].

A table of the available datasets is available through the
`availableDataSets` function.

```{r, message=FALSE}
library(microbiomeDataSets)
availableDataSets()
```

All data are downloaded from ExperimentHub and cached for local
re-use. Check the [man pages of each
function](https://microbiome.github.io/microbiomeDataSets/reference/index.html)
for a detailed documentation of the data contents and references. Let
us retrieve a `r Biocpkg("MAE")` dataset:

```{r eval=FALSE, message=FALSE}
# mae <- HintikkaXOData()
# Since HintikkaXOData is now added to mia, we can load it directly from there
# We suggest to check other datasets from microbiomeDataSets
data(HintikkaXOData, package = "mia")
mae <- HintikkaXOData
```

Data is available in `r Biocpkg("SE")`, `r
Biocpkg("TreeSE")` and `r
Biocpkg("MAE")` data containers; see the separate
page on [alternative containers](23_multi-assay_analyses.qmd) for more details.

### Curated metagenomic data

[curatedMetagenomicData](https://bioconductor.org/packages/release/data/experiment/html/curatedMetagenomicData.html)
is a large collection of curated human microbiome datasets, provided as
`TreeSE` objects [@Pasolli2017]. The resource
provides curated human microbiome data including gene families, marker
abundance, marker presence, pathway abundance, pathway coverage, and
relative abundance for samples from different body sites. See the
package homepage for more details on data availability and access.

As one example, let us retrieve the Vatanen (2016) [@Vatanen2016] data
set. This is a larger collection with a bit longer download time.

```{r, message=FALSE, eval=FALSE}
library(curatedMetagenomicData)
tse <- curatedMetagenomicData("Vatanen*", dryrun = FALSE, counts = TRUE)
```

###  Human microbiome compendium

[MicroBioMap](https://seandavi.github.io/MicroBioMap/) dataset includes 
over 170k samples of publicly available 16S rRNA amplicon sequencing data, 
all processed using the same pipeline and reference database[@Abdill2023].
After installing the MicroBioMap package (see the [original website](https://github.com/seandavi/MicroBioMap#microbiome-compendium) for instructions), you can load the compendium with

```{r, message=FALSE, eval=FALSE}
library(MicroBioMap)
cpd <- getCompendium()
```

This returns a `TreeSE` object. Currently, 
the "tree" part of the `TreeSE` is not populated, but 
that is on the roadmap[@compendiumpackage].

After loading the compendium, you will have immediate access to nearly 170,000 microbiome samples of publicly available 16S rRNA amplicon sequencing data, all processed using the same pipeline and reference database. For more use examples in R/Bioconductor, see the [MicroBioMap vignette](https://seandavi.github.io/MicroBioMap/articles/overview.html).

### Other data sources

The current collections provide access to vast microbiome data
resources. The output has to be converted into `TreeSE/MAE` separately.

- [MGnifyR](https://bioconductor.org/packages/release/bioc/html/MGnifyR.html) provides access to [EBI/MGnify](https://www.ebi.ac.uk/metagenomics/) 
- [qiitr](https://github.com/cran/qiitr) provides access to [QIITA](https://qiita.com/about) 
- [qiime2R](https://github.com/microbiome/qiime2R) provides access to [QIIME2](https://docs.qiime2.org/2024.2/) 

## Loading experimental microbiome data {#sec-loading-experimental-microbiome-data}

### 16S workflow

Result of amplicon sequencing is a large number of files that include all the sequences
that were read from samples. Those sequences need to be matched with taxa. Additionally,
we need to know how many times each taxa were found from each sample. 

There are several algorithms to do that, and DADA2 is one of the most common. 
You can find DADA2 pipeline tutorial, for example, 
[here](https://benjjneb.github.io/dada2/tutorial.html).
After the DADA2 portion of the tutorial is completed, the data is stored into _phyloseq_ object 
(Bonus: Handoff to phyloseq). To store the data to _TreeSE_,
follow the example below. 

You can find full workflow script without further explanations and comments from 
[here](https://github.com/microbiome/OMA/blob/master/dada2_workflow.Rmd)

```{r dada2_1, include=FALSE}
# Load objects
seqtab.nochim <- readRDS(system.file("extdata", "dada2_seqtab.nochim", package = "OMA"))
taxa <- readRDS(system.file("extdata", "dada2_taxa", package = "OMA"))
```

Load required packages.

```{r dada2_2}
library(mia)
library(BiocManager)
library(Biostrings)
```

Create arbitrary example sample metadata like it was done in the tutorial. Usually, 
sample metadata is imported as a file.

```{r dada2_3}
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out
```

Convert data into right format and create a _TreeSE_ object.

```{r dada2_4}
# Create a list that contains assays
counts <- t(seqtab.nochim)
counts <- as.matrix(counts)
assays <- SimpleList(counts = counts)

# Convert colData and rowData into DataFrame
samdf <- DataFrame(samdf)
taxa <- DataFrame(taxa)

# Create TreeSE
tse <- TreeSummarizedExperiment(assays = assays,
                                colData = samdf,
                                rowData = taxa
                                )

# Remove mock sample like it is also done in DADA2 pipeline tutorial
tse <- tse[ , colnames(tse) != "mock"]
```

Add sequences into _referenceSeq_ slot and convert rownames into simpler format.

```{r dada2_5}
# Convert sequences into right format
dna <- Biostrings::DNAStringSet( rownames(tse) )
# Add sequences into referenceSeq slot
referenceSeq(tse) <- dna
# Convert rownames into ASV_number format
rownames(tse) <- paste0("ASV", seq( nrow(tse) ))
tse
```

### Import from external files {#sec-import-from-file}

Microbiome (taxonomic) profiling data is commonly distributed in
various file formats. You can import such external data files as a
`TreeSE` object, but the details depend on the file
format. Here, we provide examples for common formats. Some datasets and raw
files to learn how to import raw data and construct `TreeSE/MAE` containers are
available in the
[microbiome data repository](https://github.com/microbiome/data).

#### CSV import

**CSV data tables** can be imported with the standard R functions,
  then converted to the desired format. For detailed examples, you can
  check the [Bioconductor course
  material](https://bioconductor.org/help/course-materials/2019/BSS2019/04_Practical_CoreApproachesInBioconductor.html)
  by Martin Morgan. You can also check the [example
  files](https://github.com/microbiome/OMA/tree/master/data) and
  construct your own CSV files accordingly.

Recommendations for the CSV files are the following. File names are
arbitrary; we refer here to the same names as in the examples:

- Abundance table (`assay_taxa.csv`): data matrix (features x
  samples); first column provides feature IDs, the first row provides
  sample IDs; other values should be numeric (abundances).

- Row data (`rowdata_taxa.csv`): data table (features x info); first
  column provides feature IDs, the first row provides column headers;
  this file usually contains the taxonomic mapping between different
  taxonomic levels. Ideally, the feature IDs (row names) match one-to-one with
  the abundance table row names. 

- Column data (`coldata.csv`): data table (samples x info); first
  column provides sample IDs, the first row provides column headers;
  this file usually contains the sample metadata/phenodata (such as
  subject age, health etc). Ideally, the sample IDs match one-to-one with
  the abundance table column names. 

After you have set up the CSV files, you can read them in R:

```{r importingcsv1, message=FALSE}
count_file  <- system.file("extdata", "assay_taxa.csv", package = "OMA")
tax_file    <- system.file("extdata", "rowdata_taxa.csv", package = "OMA")
sample_file <- system.file("extdata", "coldata.csv", package = "OMA")

# Load files
counts  <- read.csv(count_file, row.names=1)   # Abundance table (e.g. ASV data; to assay data)
tax     <- read.csv(tax_file, row.names=1)     # Taxonomy table (to rowData)
samples <- read.csv(sample_file, row.names=1)  # Sample data (to colData)
```

After reading the data in R, ensure the following:

- abundance table (`counts`): numeric `matrix`, with feature IDs as
  rownames and sample IDs as column names

- rowdata (`tax`): `DataFrame`, with feature IDs as rownames. If this
  is a `data.frame` you can use the function `DataFrame()` to change
  the format. Column names are free but in microbiome analysis they
  usually they refer to taxonomic ranks. The rownames in rowdata
  should match with rownames in abundance table.

- coldata (`samples`): `DataFrame`, with sample IDs as rownames. If
  this is a `data.frame` you can use the function `DataFrame()` to
  change the format.  Column names are free. The rownames in coldata
  should match with colnames in abundance table.

**Always ensure that the tables have rownames!** The _TreeSE_ constructor compares 
rownames and ensures that, for example, right samples are linked with right patient.

Also ensure that the row and column names match one-to-one between
abundance table, rowdata, and coldata:

```{r importingcsv2}
# Match rows and columns
counts <- counts[rownames(tax), rownames(samples)]

# Let us ensure that the data is in correct (numeric matrix) format:
counts <- as.matrix(counts)
```

If you hesitate about the format of the data, you can compare to one
of the available demonstration datasets, and make sure that your data
components have the same format.

There are many different source files and many different ways to read
data in R. One can do data manipulation in R as well. Investigate the
entries as follows.

```{r demodata, message=FALSE}
# coldata rownames match assay colnames
all(rownames(samples) == colnames(counts)) # our dataset
class(samples) # should be data.frame or DataFrame

# rowdata rownames match assay rownames
all(rownames(tax) == rownames(counts)) # our dataset
class(tax) # should be data.frame or DataFrame

# Counts 
class(counts) # should be a numeric matrix
```

### Constructing TreeSE

Now let us create the `TreeSE` object from the input data tables. Here
we also convert the data objects in their preferred formats:

   - counts --> numeric matrix
   - rowData --> DataFrame
   - colData --> DataFrame

The `SimpleList` could be used to include multiple alternative assays, if
necessary.

```{r importingcsv3}
# Create a TreeSE
tse_taxa <- TreeSummarizedExperiment(assays =  SimpleList(counts = counts),
                                     colData = DataFrame(samples),
                                     rowData = DataFrame(tax))

tse_taxa
```

Now you should have a ready-made `TreeSE` data object that can be used in downstream analyses.

### Constructing MAE

To construct a _MAE_ object, just combine multiple _TreeSE_ data containers. 
Here we import metabolite data from the same study.

```{r importingcsv4, message=FALSE}
count_file <- system.file("extdata", "assay_metabolites.csv", package = "OMA")
sample_file <- system.file("extdata", "coldata.csv", package = "OMA")

# Load files
counts  <- read.csv(count_file, row.names=1)  
samples <- read.csv(sample_file, row.names=1)

# Create a TreeSE for the metabolite data
tse_metabolite <- TreeSummarizedExperiment(assays = SimpleList(concs = as.matrix(counts)),
                                           colData = DataFrame(samples))

tse_metabolite
```

Now we can combine these two experiments into _MAE_.

```{r importingcsv5}
# Create an ExperimentList that includes experiments
experiments <- ExperimentList(microbiome = tse_taxa, 
                              metabolite = tse_metabolite)

# Create a MAE
mae <- MultiAssayExperiment(experiments = experiments)

mae
```

### Import functions for standard formats

Specific import functions are provided for:

-   Biom files (see `help(mia::importBIOM)`)
-   QIIME2 files (see `help(mia::importQIIME2)`)
-   Mothur files (see `help(mia::importMothur)`)

#### Biom import

Here we show how [Biom files](https://biom-format.org/) are imported into
a `TreeSE` object using as an example Tengeler2020, which is further described in section [@sec-tengeler-desc]. This dataset consists of 3 files, which can be
fetched or downloaded from
[this repository](https://github.com/microbiome/data/tree/main/Tengeler2020):

-   biom file: abundance table and taxonomy information
-   csv file: sample metadata
-   tree file: phylogenetic tree

To begin with, we store the data in a local directory within the working
directory, such as _data/_, and define the source file paths.

```{r}
biom_file_path <- system.file("extdata", "Aggregated_humanization2.biom", package = "OMA")
sample_meta_file_path <- system.file("extdata", "Mapping_file_ADHD_aggregated.csv", package = "OMA")
tree_file_path <- system.file("extdata", "Data_humanization_phylo_aggregation.tre", package = "OMA")
```  

Now we can read in the biom file and convert it into a `TreeSE` object. In addition, we retrieve the rank names from the prefixes of the feature names and then remove them with the `rankFromPrefix` and `removeTaxaPrefixes` optional arguments.

```{r}
library(mia)

# read biom and convert it to TreeSE
tse <- importBIOM(biom_file_path,
                    rankFromPrefix = TRUE,
                    removeTaxaPrefixes = TRUE)

# Check
tse
```  

The `assays` slot includes a list of abundance tables. The imported
abundance table is named as "counts".  Let us inspect only the first
cols and rows.

```{r}
assay(tse, "counts")[1:3, 1:3]
```

The `rowdata` includes taxonomic information from the biom file. The `head()` command shows just the beginning of the data table for an overview.

`knitr::kable()` helps print the information more nicely.

```{r}
head(rowData(tse))
```

We further polish the feature names by removing unnecessary characters and then replace the original rowData with its updated version.

```{r}
# Genus level has additional '\"', so let's delete that also
rowdata_modified <- BiocParallel::bplapply(rowData(tse), 
                                           FUN = stringr::str_remove, 
                                           pattern = '\"')

# rowdata_modified is a list, so convert this back to DataFrame format. 
# and assign the cleaned data back to the TSE rowData
rowData(tse) <- DataFrame(rowdata_modified)

# Now we have a nicer table
head(rowData(tse))
```

We notice that the imported biom file did not contain any colData yet,
so only an empty dataframe appears in this slot.

```{r}
head(colData(tse))
```

Let us add colData from the sample metadata, which is stored in a CSV file.

```{r}
# CSV file with colnames in the first row and rownames in the first column
sample_meta <- read.csv(sample_meta_file_path,
                        sep = ",", row.names = 1)

# Add this sample data to colData of the taxonomic data object
# Note that the data must be given in a DataFrame format (required for our purposes)
colData(tse) <- DataFrame(sample_meta)
```

Now the colData includes the sample metadata.

```{r}
head(colData(tse))
```

Finally, we add a phylogenetic tree to the rowData slot. Such feature is available only in `TreeSE` objects. Similarly, Trees specifying the sample hierarchy can be stored in the colTree slot.

Here, we read in the file containing the phylogenetic tree and insert it in corresponding slot of the `TreeSE` object.

```{r}
# Reads the tree file
tree <- ape::read.tree(tree_file_path)

# Add tree to rowTree
rowTree(tse) <- tree

# Check
tse
```

Now the rowTree slot contains the phylogenetic tree:

```{r, eval=FALSE}
head(rowTree(tse))
```

### Conversions between data formats in R

If the data has already been imported in R in another format, it
can be readily converted into `TreeSE`, as shown in our next
example. Note that similar conversion functions to
`TreeSE` are available for multiple data formats via
the `mia` package (see makeTreeSummarizedExperimentFrom* for phyloseq,
Biom, and DADA2).

```{r, message=FALSE}
library(mia)

# phyloseq example data
data(GlobalPatterns, package="phyloseq") 
GlobalPatterns_phyloseq <- GlobalPatterns
GlobalPatterns_phyloseq
```

```{r, message=FALSE}
# convert phyloseq to TSE
GlobalPatterns_TSE <- makeTreeSummarizedExperimentFromPhyloseq(GlobalPatterns_phyloseq) 
GlobalPatterns_TSE
```

We can also convert `TreeSE` objects into `phyloseq`
with respect to the shared components that are supported by both
formats (i.e. taxonomic abundance table, sample metadata, taxonomic
table, phylogenetic tree, sequence information). This is useful for
instance when additional methods are available for `phyloseq`.

```{r, message=FALSE}
# convert TSE to phyloseq
GlobalPatterns_phyloseq2 <- makePhyloseqFromTreeSummarizedExperiment(GlobalPatterns_TSE) 
GlobalPatterns_phyloseq2
```

Conversion is possible between other data formats. Interested readers can refer to the following functions:

* [makeTreeSummarizedExperimentFromDADA2](https://microbiome.github.io/mia/reference/makeTreeSummarizedExperimentFromDADA2.html)  
* [makeSummarizedExperimentFromBiom](https://microbiome.github.io/mia/reference/makeSummarizedExperimentFromBiom.html)  
* [importMetaPhlAn](https://microbiome.github.io/mia/reference/importMetaPhlAn.html)  
* [importQZA](https://microbiome.github.io/mia/reference/importQIIME2.html)
