# Data Manipulation {#sec-datamanipulation}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
chapterPreamble()
```

## Tidying and Subsetting

### Tidy data

For several custom analysis and visualization packages, such as those from
`tidyverse`, the `SE` data can be converted to a long data.frame format with 
`meltSE`.    

```{r}
library(mia)
data(GlobalPatterns, package="mia")
tse <- GlobalPatterns
tse <- transformAssay(tse, MARGIN = "samples", method="relabundance")
molten_tse <- mia::meltSE(tse,
                        add_row_data = TRUE,
                        add_col_data = TRUE,
                        assay.type = "relabundance")
# Show the first five columns
molten_tse[,1:5]
```

### Subsetting

**Subsetting** data helps to draw the focus of an analysis on particular
  sets of samples and / or features. When dealing with large datasets, 
  the subset of interest can be extracted and investigated
  separately. This might improve performance and reduce the
  computational load.

Load:

* mia
* dplyr
* knitr
* data `GlobalPatterns`

```{r include = FALSE}
# Load libraries and data
library(mia)
library(dplyr)
library(knitr)
```

Let us store `GlobalPatterns` into `tse` and check its original number of features (rows) and samples (columns). **Note**: When subsetting by sample, expect the number of columns to decrease. When subsetting by feature, expect the number of rows to decrease.

```{r}
# Store data into se and check dimensions
data("GlobalPatterns", package="mia")
tse <- GlobalPatterns
# Show dimensions (features x samples)
dim(tse) 
```

#### Subset by sample (column-wise)

For the sake of demonstration, here we will extract a subset containing only the samples of human origin (feces, skin or tongue), stored as `SampleType` within `colData(tse)` as well as in `tse`.

First, we would like to see all the possible values that `SampleType` can have and how frequent those are: 

```{r}
# Inspect possible values for SampleType
unique(tse$SampleType)
```

```{r eval = FALSE}
# Show the frequency of each value
tse$SampleType %>% table()
```

```{r echo = FALSE}
# Show the frequency of each value
tse$SampleType %>% table() %>% kable() %>%
    kableExtra::kable_styling("striped", latex_options="scale_down") %>% 
    kableExtra::scroll_box(width = "100%")
```

**Note**: after subsetting, expect the number of columns to equal the
  sum of the frequencies of the samples that you are interested
  in. For instance, `ncols = Feces + Skin + Tongue = 4 + 3 + 2 = 9`.

Next, we _logical index_ across the columns of `tse` (make sure to
leave the first index empty to select all rows) and filter for the
samples of human origin. For this, we use the information on the
samples from the meta data `colData(tse)`.

```{r}
# Subset by sample
tse_subset_by_sample <- tse[ , tse$SampleType %in% 
                               c("Feces", "Skin", "Tongue")]

# Show dimensions
dim(tse_subset_by_sample)
```

As a sanity check, the new object `tse_subset_by_sample` should have
the original number of features (rows) and a number of samples
(columns) equal to the sum of the samples of interest (in this case
9).

Several criteria can be used to subset by sample:

* origin
* sampling time
* sequencing method
* DNA / RNA barcode
* cohort

#### Subset by feature (row-wise)

Similarly, here we will extract a subset containing only the features
that belong to the phyla Actinobacteria and Chlamydiae, stored as
`Phylum` within `rowData(tse)`. However, subsetting by feature implies
a few more obstacles, such as the presence of `NA` elements and the
possible need for agglomeration.

As previously, we would first like to see all the possible values that `Phylum` can have and how frequent those are:
  
```{r}
# Inspect possible values for phylum
# and show the first five values
cat(paste(unique(rowData(tse)$Phylum)[1:5], collapse = "\n"))

```

```{r}
# Show the frequency of each value
rowData(tse)$Phylum %>% table() %>% head() %>% 
  kable() %>%
  kableExtra::kable_styling("striped", latex_options="scale_down") %>% 
  kableExtra::scroll_box(width = "100%")

```

**Note**: after subsetting, expect the number of columns to equal the
  sum of the frequencies of the feature(s) that you are interested
  in. For instance, `nrows = Actinobacteria + Chlamydiae = 1631 + 21 =
  1652`.

Depending on your research question, you might or might not need to
agglomerate the data in the first place: if you want to find the
abundance of each and every feature that belongs to Actinobacteria and
Chlamydiae, agglomeration is not needed. However, if you want to find the total
abundance of all features that belong to Actinobacteria or
Chlamydiae, agglomeration is recommended.

##### Non-agglomerated data

Next, we _logical index_ across the rows of `tse` (make sure to leave
the second index empty to select all columns) and filter for the
features that fall in either Actinobacteria or Chlamydiae group. For this,
we use the information on the samples from the metadata
`rowData(tse)`.

The first term with the `%in%` operator includes all the features
of interest, whereas the second term after the AND operator `&`
filters out all features that have an `NA` in place of the phylum variable.

```{r}
# Subset by feature
tse_subset_by_feature <- tse[rowData(tse)$Phylum %in% 
                            c("Actinobacteria","Chlamydiae") 
                             , ]

# Show dimensions
dim(tse_subset_by_feature)
```

As a sanity check, the new object, `tse_subset_by_feature`, should have the original number of samples (columns) and a number of features (rows) equal to the sum of the features of interest (in this case, 1652).

##### Agglomerated data

When total abundances of certain phyla are of relevance, the data is initially agglomerated by Phylum. Then, similar steps as in the case of non-agglomerated data are followed.

```{r}
# Agglomerate by phylum
tse_phylum <- tse %>% agglomerateByRank(rank = "Phylum")

# Subset by feature and remove NAs
tse_phylum_subset_by_feature <- tse_phylum[
                                rowData(tse_phylum)$Phylum %in% 
                                c("Actinobacteria", "Chlamydiae")
                                &!is.na(rowData(tse_phylum)$Phylum),
                                ]

# Show dimensions
dim(tse_phylum_subset_by_feature)
```

**Note**: as data was agglomerated, the number of rows should equal the
  number of phyla used to index (in this case, just 2).

Alternatively:

```{r}
# Store features of interest into phyla
phyla <- c("Actinobacteria", "Chlamydiae")
# subset by feature
tse_phylum_subset_by_feature <- tse_phylum[phyla, ]
# Show dimensions
dim(tse_subset_by_feature)
```

The code above returns the non-agglomerated version of the data.

Fewer characteristics can be used to subset by feature:

* Taxonomic rank
* Meta-taxonomic group

For subsetting by kingdom, agglomeration does not apply, whereas for the other ranks it can be applied if necessary.

#### Subset by sample and feature

Finally, we can subset data by sample and feature at once. The
resulting subset contains all the samples of human origin and all the
features of phyla Actinobacteria or Chlamydiae.

```{r}
# Subset by sample and feature and remove NAs
tse_subset_by_sample_feature <- tse[
  rowData(tse)$Phylum %in% c("Actinobacteria", "Chlamydiae") 
  & !is.na(rowData(tse)$Phylum), 
  tse$SampleType %in% c("Feces", "Skin", "Tongue")]

# Show dimensions
dim(tse_subset_by_sample_feature)
```

**Note**: the dimensions of `tse_subset_by_sample_feature` are on par with
  those of the previous subsets (9 columns filtered by sample and 1652
  rows filtered by feature).

If a study was to consider and quantify the presence of Actinobacteria
as well as Chlamydiae in different sites of the human body,
`tse_subset_by_sample_feature` might be a suitable subset to start
with.

#### Remove empty columns and rows

Sometimes data might contain, e.g., features that are not present in any of the  samples.
This can occur, for example, after data subsetting. In certain analyses, we might want to
remove those instances.

```{r}
# Agglomerate data at Genus level 
tse_genus <- agglomerateByRank(tse, rank = "Genus", na.rm = FALSE)
# List bacteria that we want to include
genera <- c("Class:Thermoprotei", 
            "Genus:Sulfolobus", 
            "Genus:Sediminicola")
# Subset data
tse_genus_sub <- tse_genus[genera, ]

tse_genus_sub
```

```{r}
# List total counts of each sample
colSums(assay(tse_genus_sub, "counts"))[1:5]
```

Now we can see that certain samples do not include any bacteria. We can remove those.

```{r}
# Remove samples that do not contain any bacteria
tse_genus_sub <- tse_genus_sub[ , 
                                colSums(assay(
                                  tse_genus_sub, "counts")) != 0 
                                ]
tse_genus_sub
```

The same action can also be applied to the features.

```{r}
# Take only those samples that are collected from feces, skin, or tongue
tse_genus_sub <- tse_genus[ , tse_genus$SampleType %in% 
                              c("Feces", "Skin", "Tongue")]

tse_genus_sub
```

```{r}
# What is the number of bacteria that are not present?
sum(rowSums(assay(tse_genus_sub, "counts")) == 0)
```

We can see that there are bacteria that are not present in the samples we chose.
We can remove those bacteria from the data. 

```{r}
# Take only those bacteria that are present
tse_genus_sub <- tse_genus_sub[rowSums(assay
                                       (tse_genus_sub, 
                                         "counts")) > 0, ]

tse_genus_sub
```

### Splitting

You can split the data based on variables by using the functions 
`agglomerateByRanks` and `splitOn`.

`agglomerateByRanks` splits the data based on taxonomic ranks. Since the 
elements of the output list share columns, they can be stored into `altExp` by
setting `as.list = FALSE`.

```{r agglomerateByRanks}
tse <- agglomerateByRanks(tse)
altExps(tse)
```

If you want to split the data based on another variable than taxonomic rank, use 
`splitOn`. It works for row-wise and column-wise splitting.

```{r splitOn}
splitOn(tse, "SampleType")
```

## Add or modify data {#sec-add-or-modify-data}

The information contained by the `colData` of a `TreeSE` can be modified by
accessing the desired variables.

```{r modify-coldata}
# modify the Description entries
colData(tse)$Description <- paste(
  colData(tse)$Description, 
  "modified description")

# view modified variable
head(tse$Description)
```

New information can also be added to the experiment by creating a new variable.

```{r add-coldata}
# simulate new data
new_data <- runif(ncol(tse))

# store new data as new variable in colData
colData(tse)$NewVariable <- new_data

# view new variable
head(tse$NewVariable)
```

## Merge data

`mia` package has `mergeSEs` function that merges multiple `SummarizedExperiment`
objects. For example, it is possible to combine multiple `TreeSE` objects which each
includes one sample. 

`mergeSEs` works much like standard joining operations. It combines rows and 
columns and allows you to specify the merging method.

```{r merge1}
# Take subsets for demonstration purposes
tse1 <- tse[, 1]
tse2 <- tse[, 2]
tse3 <- tse[, 3]
tse4 <- tse[1:100, 4]
```

```{r merge2}
# With inner join, we want to include all shared rows. When using mergeSEs function
# all samples are always preserved.
tse <- mergeSEs(list(tse1, tse2, tse3, tse4), join = "inner")
tse
```

```{r merge3}
# Left join preserves all rows of the 1st object
tse <- mergeSEs(tse1, tse4, missing_values = 0, join = "left")
tse
```

### Additional functions

* [mapTaxonomy](https://microbiome.github.io/mia/reference/taxonomy-methods.html)  
* [mergeFeatures/mergeSamples](https://microbiome.github.io/mia/reference/merge-methods.html)  
