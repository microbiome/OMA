# Extra material {#sec-extras} 

```{r}
knitr::opts_chunk$set(eval=TRUE, warning=FALSE, message=FALSE)
```


## Slides

[Outreach material](https://microbiome.github.io/outreach/) includes
slide sets for training events.


## PERMANOVA comparison {#compare-permanova}

Here we present two possible uses of the `adonis2` function which performs PERMANOVA. The
optional argument `by` has an effect on the statistical outcome, so its two options are
compared here.

```{r permanova_import}
# import necessary packages
library(gtools)
library(purrr)
library(vegan)
library(gtools)
library(purrr)
```

Let us load the _enterotype_ TSE object and run PERMANOVA for
different orders of three variables with two different approaches:
`by = "margin"` or `by = "terms"`.


```{r permanova_prep}
# load and prepare data
library(mia)
data("enterotype", package="mia")
enterotype <- transformAssay(enterotype, method = "relabundance")
# drop samples missing meta data
enterotype <- enterotype[ , !rowSums(is.na(colData(enterotype)[, c("Nationality", "Gender", "ClinicalStatus")]) > 0)]
# define variables and list all possible combinations
vars <- c("Nationality", "Gender", "ClinicalStatus")
var_perm <- permutations(n = 3, r = 3, vars)
formulas <- apply(var_perm, 1, function(row) purrr::reduce(row, function(x, y) paste(x, "+", y)))
# create empty data.frames for further storing p-values
terms_df <- data.frame("Formula" = formulas,
                       "ClinicalStatus" = rep(0, 6),
                       "Gender" = rep(0, 6),
                       "Nationality" = rep(0, 6))
margin_df <- data.frame("Formula" = formulas,
                        "ClinicalStatus" = rep(0, 6),
                        "Gender" = rep(0, 6),
                        "Nationality" = rep(0, 6))
```



```{r permanova_loop}
for (row_idx in 1:nrow(var_perm)) {
  
  # generate temporary formula (i.e. "assay ~ ClinicalStatus + Nationality + Gender")
  tmp_formula <- purrr::reduce(var_perm[row_idx, ], function(x, y) paste(x, "+", y))
  tmp_formula <- as.formula(paste0('t(assay(enterotype, "relabundance")) ~ ',
                            tmp_formula))

  # multiple variables, default: by = "terms"
  set.seed(75)
  with_terms <- adonis2(tmp_formula, 
                by = "terms",
                data = colData(enterotype),
                permutations = 99)
  
  # multiple variables, by = "margin"
  set.seed(75)
  with_margin <- adonis2(tmp_formula, 
                 by = "margin",
                 data = colData(enterotype),
                 permutations = 99)

  # extract p-values
  terms_p <- with_terms[["Pr(>F)"]]
  terms_p <- terms_p[!is.na(terms_p)]
  margin_p <- with_margin[["Pr(>F)"]]
  margin_p <- margin_p[!is.na(margin_p)]
  
  # store p-values into data.frames
  for (col_idx in 1:ncol(var_perm)) {
    
    terms_df[var_perm[row_idx, col_idx]][row_idx, ] <- terms_p[col_idx]
    margin_df[var_perm[row_idx, col_idx]][row_idx, ] <- margin_p[col_idx]
    
  }
  
}
```




The following table displays the p-values for the three variables
ClinicalStatus, Gender and Nationality obtained by PERMANOVA with
`adonis2`. Note that the p-values remain identical when `by =
"margin"`, but change with the order of the variables in the
formula when `by = "terms"` (default).


```{r permanova_table}

df <- terms_df %>%
  dplyr::inner_join(margin_df, by = "Formula", suffix = c(" (terms)", " (margin)"))

knitr::kable(df)
```


## Bayesian Multinomial Logistic-Normal Models

Analysis using such model could be performed with the function
`pibble` from the `fido` package, wihch is in form of a Multinomial
Logistic-Normal Linear Regression model; see
[vignette](https://jsilve24.github.io/fido/articles/introduction-to-fido.html)
of package.


The following presents such an exemplary analysis based on the 
data of @Sprockett2020 available
through `microbiomeDataSets` package.


```{r}
library(fido)
```

Loading the libraries and importing data:

```{r}
library(fido)
```

```{r, eval=FALSE}
library(microbiomeDataSets)
tse <- SprockettTHData()
```

```{r, echo=FALSE}
# saveRDS(tse, file="data/SprockettTHData.Rds")
# Hidden reading of the saved data
tse <- readRDS("../extdata/SprockettTHData.Rds")

```


We pick three covariates ("Sex","Age_Years","Delivery_Mode") during this
analysis as an example, and beforehand we check for missing data:


```{r}
library(mia)
cov_names <- c("Sex","Age_Years","Delivery_Mode")
na_counts <- apply(is.na(colData(tse)[,cov_names]), 2, sum)
na_summary<-as.data.frame(na_counts,row.names=cov_names)
```

We drop missing values of the covariates:

```{r}
tse <- tse[ , !is.na(colData(tse)$Delivery_Mode) ]
tse <- tse[ , !is.na(colData(tse)$Age_Years) ]
```

We agglomerate microbiome data to Phylum:

```{r}
tse_phylum <- mergeFeaturesByRank(tse, "Phylum")
```

We extract the counts assay and covariate data to build the model
matrix:

```{r}
Y <- assays(tse_phylum)$counts
# design matrix
# taking 3 covariates
sample_data<-as.data.frame(colData(tse_phylum)[,cov_names])
X <- t(model.matrix(~Sex+Age_Years+Delivery_Mode,data=sample_data))
```

Building the parameters for the `pibble` call to build the model; see more at [vignette](https://jsilve24.github.io/fido/articles/introduction-to-fido.html):

```{r}
n_taxa<-nrow(Y)
upsilon <- n_taxa+3
Omega <- diag(n_taxa)
G <- cbind(diag(n_taxa-1), -1)
Xi <- (upsilon-n_taxa)*G%*%Omega%*%t(G)
Theta <- matrix(0, n_taxa-1, nrow(X))
Gamma <- diag(nrow(X))
```

Automatically initializing the priors and visualizing their distributions:

```{r}
priors <- pibble(NULL, X, upsilon, Theta, Gamma, Xi)
names_covariates(priors) <- rownames(X)
plot(priors, pars="Lambda") + ggplot2::xlim(c(-5, 5))
```

Estimating the posterior by including our response data `Y`.
Note: Some computational failures could occur (see [discussion](https://github-wiki-see.page/m/jsilve24/fido/wiki/Frequently-Asked-Questions))
the arguments `multDirichletBoot` `calcGradHess` could be passed in such case.

```{r}
priors$Y <- Y 
posterior <- refit(priors, optim_method="adam", multDirichletBoot=0.5) #calcGradHess=FALSE
```

Printing a summary about the posterior:

```{r}
ppc_summary(posterior)
```
Plotting the summary of the posterior distributions of the regression parameters:

```{r}
names_categories(posterior) <- rownames(Y)
plot(posterior,par="Lambda",focus.cov=rownames(X)[2:4])
```

Taking a closer look at "Sex" and "Delivery_Mode":

```{r}
plot(posterior, par="Lambda", focus.cov = rownames(X)[c(2,4)])
```


## Interactive 3D Plots

```{r}
# Load libraries
library(rgl)
library(plotly)
```

```{r setup2}
library(knitr)
knitr::knit_hooks$set(webgl = hook_webgl)
```


In this section we make a 3D version of the earlier  Visualizing the most dominant genus on PCoA (see \@ref(quality-control)), with the help of the plotly [@Sievert2020].

```{r, eval=FALSE}
# Importing necessary libraries
library(curatedMetagenomicData)
library(dplyr)
library(DT)
library(mia)
library(scater)

# Querying the data
tse <- sampleMetadata %>%
    filter(age >= 18) %>% # taking only data of age 18 or above
    filter(!is.na(alcohol)) %>% # excluding missing values
    returnSamples("relative_abundance")

tse_Genus <- mergeFeaturesByRank(tse, rank="genus")
tse_Genus <- addDominant(tse_Genus,assay.type="relative_abundance", name = "dominant_taxa")

# Performing PCoA with Bray-Curtis dissimilarity.
tse_Genus <- runMDS(tse_Genus, FUN = vegan::vegdist, ncomponents = 3,
              name = "PCoA_BC", assay.type = "relative_abundance")

# Getting the 6 top taxa
top_taxa <- getTop(tse_Genus,top = 6, assay.type = "relative_abundance")

# Naming all the rest of non top-taxa as "Other"
most_abundant <- lapply(colData(tse_Genus)$dominant_taxa,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})

# Storing the previous results as a new column within colData
colData(tse_Genus)$most_abundant <- as.character(most_abundant)

# Calculating percentage of the most abundant
most_abundant_freq <- table(as.character(most_abundant))
most_abundant_percent <- round(most_abundant_freq/sum(most_abundant_freq)*100, 1)

# Retrieving the explained variance
e <- attr(reducedDim(tse_Genus, "PCoA_BC"), "eig");
var_explained <- e/sum(e[e>0])*100
```

## phyloseq vs TreeSE cheatsheet

This section has a cheatsheet for translating common functions in phyloseq
to TreeSE/mia with example code.

```{r}
#| label = "download_libs"

# Download libraries
library(phyloseq)
library(dplyr)
library(ggplot2)
```

Start by loading data as a phyloseq object phy and as TreeSE object tse.


```{r}
#| label = "load_data"

# Loading example data
# Using GlobalPatterns dataset

data(package = "phyloseq", "GlobalPatterns") # phyloseq object
phy <- GlobalPatterns # Rename
phy # Check the phyloseq object

data(package = "mia", "GlobalPatterns") # TreeSE object
tse <- GlobalPatterns # Rename
tse # Check the tse object
```

### Accessing different types of data in phyloseq versus TreeSE

Often microbiome datasets contain three different types of tables, one which defines the microbes' taxonomy from domain to species level, one that describes sample level information like whether the sample is from a healthy or a diseased person, and one that has the abundances of taxa from mapping, like an OTU table.

There are slightly different names for these tables in phyloseq and tse, but they can be retrieved from the phyloseq and tse containers in analogous ways.

**Accessing the table of taxonomic names: tax_table = rowData**

phyloseq and TreeSE objects' taxonomy tables can be accessed with tax_table and
rowData commands.

```{r}
phy_taxtable <-
  tax_table(phy)  %>% # Access the phyloseq taxonomic name table
  data.frame # Make into a data frame

tse_taxtable <- rowData(tse) %>% # Same for tse
  data.frame

```

**Accessing sample data: sample_data = colData**

Sample data can be accessed with sample_data and colData commands.

```{r}
#| label = "access_sampledata"

phy_sampledata <-
  sample_data(phy) %>% data.frame

tse_sampledata <-
  colData(tse) %>% data.frame

```

**Accessing operational taxonomic unit (OTU) abundance objects: otu_table = assay**

OTU tables can be accessed with otu_table and assay commands. The assay can also
hold other types of information like taxa abundances from shotgun metagenomic
annotation, or functional gene abundances.

```{r}
#| label = "access_otutable"

phy_otutable <-
  otu_table(phy) %>% data.frame

tse_otutable <-
  assay(tse) %>% data.frame

```

### Building phyloseq objects vs TreeSE objects: phyloseq = TreeSummarizedExperiment
After learning how to access various data types from TreeSE, let's see how creating TreeSE objects compares to creating phyloseq objects. We will use the vanilla dataframes we created from the phyloseq object to demonstrate making both types of data objects. These are identical to the equivalent tse dataframes but for demonstration we will use ones created from phy.

Let's start by checking what we have.

```{r}
phy_otutable %>% head
phy_sampledata %>% head
phy_taxtable %>% head
```
Ok, these are all normal data frames which could come from upstream bioinformatics, like OTU tables that come from 16S analysis, and taxonomy tables.

Let's demo how to create the treeSE object, how it compares to creating phyloseq and how assay in treeSE compares to otu_table in phyloseq.

```{r}
#| label = "build_dataobjects"


# Create phyloseq object
OTU_phy <- otu_table(phy_otutable %>% as.matrix, taxa_are_rows = TRUE) # Make OTU table
TAX_phy <- tax_table(phy_taxtable %>% as.matrix) # Make TAX table
SAMPLE_phy <- sample_data(phy_sampledata) # Make sample data table

phy <- phyloseq(OTU_phy, TAX_phy, SAMPLE_phy) # Combine into phyloseq object
phy # Inspect

```

Let's start by checking our otu table, and see if it is counts or already normalized. We will use the same data frame extracted from the phy object as before.

```{r}
#| label = "check_otutable"

# Check if we have counts or normalized data

phy_otutable %>% head

```

We have counts!

Since TreeSEs can hold many different versions of the OTU table, most commonly
either relative abundances or counts, we will need to give our assay (which corresponds to otu_table in Phyloseq) a name and
list the different types of assays or transformations we have. In this example we only have one
item 'counts' in the list.

Let's convert the data frame to a matrix and make the list of assays.

```{r}
# Create TreeSE
counts <- as.matrix(phy_otutable) # Convert to a matrix
assays <- SimpleList(counts = counts)
tse <- TreeSummarizedExperiment(assays = assays, 
                                colData = phy_sampledata,
                                rowData = phy_taxtable
)

```
Let's check the different assay names we have.

```{r}
assayNames(tse)
```


### Handling different OTU table normalizations in phyloseq vs TreeSE

Adding the assays as a list might seem inconvenient if you only have one type of
OTU table (counts in our example), but let's see why it is actually very convenient to be able to hold multiple assays in one data object. 

Here we'll show an example of how to add relative abundances and CLR normalized
OTU tables to your tse assays.

With phyloseq you would need three different phyloseq objects, each taking up
7.7 MB of memory, whilst the tse with the three assays takes up only 18.3 MB.

```{r}
# Add another assay that holds the relative abundance normalized OTU table
tse <-
  transformAssay(tse, assay.type = "counts", method = "relabundance")
assays(tse) # Let's check

# With phyloseq you would need to have two different phyloseq objects
phy_relab  = transform_sample_counts(phy, function(x)
  x / sum(x))

# Let's add clr transformed data just for the fun of it :)
tse <-
  transformAssay(tse,
                 assay.type = "counts",
                 method = "clr",
                 pseudocount = 1)
assays(tse) # Let's check

# With phyloseq you would need to have a third phyloseq object.
# phy_CLR <- microbiome::transform(phy, 'clr') # Example, don't run
```
### Subsetting samples and taxa

**Subsetting samples: subset_samples = indexing columns**

Next let's learn how to subset samples. In phyloseq we use subset_samples command, but since the sample data is stored in columns in the TreeSe, we can access it by indexing columns.

In this section we will remove the "Mock" samples and make new data objects.

```{r}
phy_nomock <-
  subset_samples(phy, !SampleType == "Mock") # Removing mock samples in phyloseq

tse_nomock <-
  tse[,!tse$SampleType == "Mock"] # tse uses indexing columns
```

Let's see what we have now.

```{r}
#| label = "check_removed_samples"

phy %>% sample_names() %>% length()
phy_nomock %>% sample_names() %>% length()
colnames(tse) %>% length()
colnames(tse_nomock) %>% length()
```
We have removed three samples that where SampleType "Mock".

**Subsetting taxa: subset_taxa = indexing rows**

Taxa are stored in rows in TreeSE and the TreeSE equivalent to subset_taxa is indexing rows.

```{r}
#| label = "take_only_bact"

phy_nomock_bacteria <-
  subset_taxa(phy_nomock, Kingdom == "Bacteria")
tse_nomock_bacteria <-
  tse[tse$Kingdom == "Bacteria", ]

phy_nomock_bacteria # We have 19008 taxa (only bacteria) and before 19216
tse_nomock_bacteria 
```

### Calculating alpha diversity: estimate_richness = estimateDiversity

Now we know how data stored in TreeSE can be accessed and the TreeSE data objects created. Let's look at how we can calculate alpha diversity using mia compared to phyloseq package. 

The mia command estimateDiversity will return a TreeSE and the results are stored in colData, unlike the phyloseq command that outputs a data frame with just the diversity estimates.

In phyloseq you would need to add the alpha diversity separately to your sample data to keep it safe with the other sample level data.

```{r}
#| label = "alpha_div"

# Alpha diversity with phyloseq
df <- estimate_richness(phy, measures = "Shannon") 
head(df) # Inspect

# Add Shannon to the sample_data to keep results safe with other sample data
phy_sampledata <- sample_data(phy) %>% data.frame
phy_sampledata$shannon <- df$Shannon
sample_data(phy) <- phy_sampledata
sample_data(phy) %>% head  # Inspect
```

For the tse we will need to specify which assay (which normalization of the OTU table) we want to use, since we have three options now with the counts, relative abundance and CLR. We can check the assay names first.

```{r}
#| label = "mia_alpha_div"

assayNames(tse) # Check the assay names

tse <- estimateDiversity(tse, assay.type = "counts", index = "shannon") # Let's use counts
# Inspect the new colData with added alpha diversity estimate
colData(tse) %>% names # shannon has been added to the colData

```

If we want to extract a data frame that only has the alpha diversity it can be done easily.

```{r}
#| label = "extract_alpha"
# Extract
df <- colData(tse) %>% data.frame %>% dplyr::select(matches("shannon"))

```

### Calculating beta diversity: ordinate = runMDS

We can calculate PCoA with Bray-Curtis distances in phyloseq using the ordinate command. 
The beta diversity calculation in mia  outputs a TreeSE with a new type of data,
reduced dimensions or reducedDim. 

Here we will use the scater package that runs the PCoA with runMDS. (PCoA and
MDS mean the same thing)

In phyloseq you would again need to add the dimensions to the sample data if you
want to keep them safe with other metadata.

```{r}
#| label = "beta_div"

# Run PCoA on the relative abundance data and store in phy_ord list
phy_ord <- ordinate(phy_relab, method = "PCoA", distance = "bray")

library(scater)

# Ordinate with runMDS and implement the vegan's Bray-Curtis dissimilarity distance calculation
tse <- runMDS(tse,
              FUN = vegan::vegdist,
              method = "bray",
              assay.type = "relabundance",
              name = "MDS_bray",
              ncomponents = 10) # Let's also define how many dimensions
tse # Inspect, now we have new reducedDim "MDS_bray"

```

### Plotting ordinations: plot_ordination = plotReducedDim
phyloseq has it's own plotting fuction for ordinations.

```{r}
#| label = "plot_ord"

plot_ordination(physeq = phy, ordination = phy_ord, color = "SampleType")
```

It is also easy to plot the ordination stored in reducedDim in the tse using the
plotReducedDim function. We can first check what the name of the Bray-Curtis
MDS/PCoA was incase we forgot.

```{r}
#| label = "check_reducedDimNames"
# Check reduced dim names
reducedDimNames(tse)
```
Ok, let's plot.

```{r}
#| label = "plot_red_dim"
# Plot
plotReducedDim(tse, "MDS_bray", color_by = "SampleType")
# The sign is given arbitrarily. We can change it to match the plot_ordination
reducedDim(tse)[, 1] <- -reducedDim(tse)[, 1]
reducedDim(tse)[, 2] <- -reducedDim(tse)[, 2]
plotReducedDim(tse, "MDS_bray", color_by = "SampleType")
```

### Agglomerating taxa: tax_glom=mergeFeaturesByRank

Often you might want to study your data using different taxonomic ranks, for example check if you see differences in the abundances of higher taxonomic levels.

```{r}
#| label = "tax_glom"

phy_fam <- tax_glom(phy, taxrank = "Family")
```

This family level data object can again be conveniently stored in a tse object
under altExp.

Tax_glom removes the taxa which have not been assigned to the level given in
taxrank by default (NArm = TRUE).
So we will add the onRankOnly = TRUE to mergeFeaturesByRank function which is
equivalent to the default behaviour of tax_glom.

```{r}
#| label = "mergeFeaturesByRank"

altExp(tse, "Family") <-
  mergeFeaturesByRank(tse,
                      rank = "Family",
                      onRankOnly = TRUE, # Let's add the equivalent option to NArm =TRUE
                      agglomerateTree = FALSE)
altExp(tse, "Family")
```

### Cheatsheet

```{r}
#| label = "cheatsheet"

library(knitr)
df <-
  data.frame(
    Functionality = c(
      "Access sample data", # Row 1
      "Access tax table", # Row 2
      "Access OTU table", 
      "Build data object",
      "Calculate alpha diversity",
      "Calculate beta diversity",
      "Plot ordination",
      "Subset taxa",
      "Subset samples",
      "Aggromerate taxa"
    ),
    phyloseq = c(
      "sample_data()",
      "tax_table()",
      "otu_table()",
      "phyloseq()",
      "estimate_richness()",
      "ordinate()",
      "plot_ordination()",
      "subset_taxa()",
      "subset_samples()",
      "tax_glom()"
    ),
    miaTreeSE = c(
      "Index columns",
      "Index rows",
      "assays()",
      "TreeSummarizedExperiment()",
      "estimateDiversity()",
      "runMDS()",
      "plotReducedDim()",
      "Index rows",
      "Index columns",
      "mergeFeaturesByRank()"
    )
  )

df2 <-
  data.frame(
    Data_type = c("OTU table", # Row 1
                  "Taxonomy table", # Row2
                  "Sample data table"), # Row 3
    phyloseq = c("otu_table", # Row 1
                 "tax_table", # Row2
                 "sample_data"),# Row 3
    TreeSE = c("assay", # Row 1
               "rowData", # Row2
               "colData") # Row 3
  )
kable(df)
kable(df2)
```
