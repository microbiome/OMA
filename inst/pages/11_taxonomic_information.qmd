# Taxonomic Information {#sec-taxonomic-information}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
chapterPreamble()
```

```{r, message=FALSE}
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns
```

Taxonomic information is a key part of analyzing microbiome data and without
it, any type of data analysis probably will not make much sense. However,
the degree of detail of taxonomic information differs depending on the dataset
and annotation data used.

Therefore, the mia package expects a loose assembly of taxonomic information
and assumes certain key aspects:

* Taxonomic information is given as character vectors or factors in the 
`rowData` of a `SummarizedExperiment` object.
* The columns containing the taxonomic information must be named `domain`,
`kingdom`, `phylum`, `class`, `order`, `family`, `genus`, `species` or with
a capital first letter.
* the columns must be given in the order shown above
* column can be omited, but the order must remain

In this chapter, we will refer to co-abundant groups as CAGs, which are
clusters of taxa that co-vary across samples.

## Assigning taxonomic information.

There are a number of methods to assign taxonomic information. We like to give
a short introduction about the methods available without ranking one over the 
other. This has to be your choice based on the result for the individual 
dataset.

### dada2

The dada2 package [@Callahan2016dada2] implements the `assignTaxonomy`
function, which takes as input the ASV sequences associated with each
row of data and a training dataset. For more information visit the
[dada2 homepage](https://benjjneb.github.io/dada2/assign.html).

### DECIPHER

The DECIPHER package [@R_DECIPHER] implements the `IDTAXA` algorithm to assign
either taxonomic information or function information. For `mia`
only the first option is of interest for now and more information can be
found on the [DECIPHER website](http://www2.decipher.codes/Classification.html).

## Functions to access taxonomic information

`checkTaxonomy` checks whether the taxonomic information is usable for `mia`

```{r}
checkTaxonomy(tse)
```

Since the `rowData` can contain other data, `taxonomyRanks` will return the 
columns `mia` assumes to contain the taxonomic information.

```{r}
taxonomyRanks(tse)
```

This can then be used to subset the `rowData` to columns needed.

```{r}
rowData(tse)[, taxonomyRanks(tse)]
```

`taxonomyRankEmpty` checks for empty values in the given `rank` and returns a 
logical vector of `length(x)`.

```{r}
all(!taxonomyRankEmpty(tse, rank = "Kingdom"))
table(taxonomyRankEmpty(tse, rank = "Genus"))
table(taxonomyRankEmpty(tse, rank = "Species"))
```

`getTaxonomyLabels` is a multi-purpose function, which turns taxonomic
information into a character vector of `length(x)`

```{r}
head(getTaxonomyLabels(tse))
```

By default, this will use the lowest non-empty information to construct a
string with the following scheme `level:value`. If all levels are the same,
this part is omitted, but can be added by setting `with_rank = TRUE`.

```{r}
phylum <- !is.na(rowData(tse)$Phylum) &
    vapply(data.frame(apply(rowData(tse)[, taxonomyRanks(tse)[3:7]], 1L, is.na)), all, logical(1))
head(getTaxonomyLabels(tse[phylum,]))
head(getTaxonomyLabels(tse[phylum,], with_rank = TRUE))
```

By default the return value of `getTaxonomyLabels` contains only
unique elements by passing it through `make.unique`. This step can be
omitted by setting `make_unique = FALSE`.

```{r}
head(getTaxonomyLabels(tse[phylum,], with_rank = TRUE, make_unique = FALSE))
```

To apply the loop resolving function `resolveLoop` from the
`TreeSummarizedExperiment` package [@R_TreeSummarizedExperiment] within
`getTaxonomyLabels`, set `resolve_loops = TRUE`.

The function `getUniqueFeatures` gives a list of unique taxa for the
specified taxonomic rank.

```{r}
head(getUniqueFeatures(tse, rank = "Phylum"))
```

### Generate a taxonomic tree on the fly {#sec-fly-tree}

To create a taxonomic tree, `taxonomyTree` used the information and returns a
`phylo` object. Duplicate information from the `rowData` is removed.

```{r}
taxonomyTree(tse)
```

```{r}
tse <- addTaxonomyTree(tse)
tse
```

The implementation is based on the `toTree` function from the
`TreeSummarizedExperiment` package [@R_TreeSummarizedExperiment].

## Data agglomeration {#sec-data-agglomeration}

One of the main applications of taxonomic information in regards to count data
is to agglomerate count data on taxonomic levels and track the influence of 
changing conditions through these levels. For this `mia` contains the
`mergeFeaturesByRank` function. The ideal location to store the agglomerated data
is as an alternative experiment.

```{r}
tse <- transformAssay(tse, assay.type = "counts", method = "relabundance")
altExp(tse, "Family") <- mergeFeaturesByRank(tse, rank = "Family",
                                           agglomerateTree = TRUE)
altExp(tse, "Family")
```

If multiple assays (counts and relabundance) exist, both will be agglomerated.

```{r}
assayNames(tse)
assayNames(altExp(tse, "Family"))
```

```{r}
assay(altExp(tse, "Family"), "relabundance")[1:5, 1:7]
```
  
```{r taxinfo_altexp_example}
assay(altExp(tse, "Family"), "counts")[1:5, 1:7]
```

`altExpNames` now consists of `Family` level data. This can be extended to use 
any taxonomic level listed in `mia::taxonomyRanks(tse)`.

Rare taxa can also be aggregated into a single group "Other" instead of 
filtering them out. A suitable function for this is `mergeFeaturesByPrevalence`.
The number of rare taxa is higher on the species level, which causes the need 
for data agglomeration by prevalence.

```{r}
altExp(tse, "Species_byPrevalence") <- mergeFeaturesByPrevalence(tse, 
                                                               rank = "Species", 
                                                               other_label = "Other", 
                                                               prevalence = 5 / 100, 
                                                               detection = 1 / 100, 
                                                               as_relative = T)
altExp(tse, "Species_byPrevalence")

assay(altExp(tse, "Species_byPrevalence"), "relabundance")[88:92, 1:7]
```

```{r}
# Saving the tse for later
tseGlobalPatterns <- tse
```

### Taxa clustering {#sec-taxa-clustering}
Another way to agglomerate the data is to cluster the taxa. To do so,
we usually start by doing a compositionality aware transformation such as CLR, 
followed by the application of a standard clustering method.

Here is an example that does a CLR transformation followed by the hierarchical
clustering algorithm. 

First, we import the library `bluster` that simplifies the clustering.

```{r bluster_dependence}
library(bluster)
```

Then we do the CLR transform followed by the clustering. We will cluster with
two different distances: the euclidean distance and the kendall distance.

```{r taxa_clustering}
# Get the data
data("peerj13075", package = "mia")
tse <- peerj13075

# The result of the CLR transform is stored in the assay clr
tse <- transformAssay(tse, method = "clr", pseudocount = 1)

tse <- transformAssay(tse, assay.type = "clr", method = "z", 
                      MARGIN = "features")

# Cluster (with euclidean distance) on the features of the z assay
tse <- cluster(tse,
               assay.type = "z",
               clust.col = "hclustEuclidean",
	       MARGIN = "features",
               HclustParam(dist.fun = stats::dist, method = "ward.D2"))

# Declare the Kendall dissimilarity computation function
kendall_dissimilarity <- function(x) {
    as.dist(1 - cor(t(x), method = "kendall"))
}

# Cluster (with Kendall dissimilarity) on the features of the z assay
tse <- cluster(tse,
               assay.type = "z",
               clust.col = "hclustKendall",
       	       MARGIN = "features", 	       
               HclustParam(dist.fun = kendall_dissimilarity, method = "ward.D2"))
```

Let us store the resulting cluster indices in the `rowData` column specified 
with the `clust.col` parameter.

```{r taxa_clustering_result}
# Checking the clusters
clusters_euclidean <- rowData(tse)$hclustEuclidean
head(clusters_euclidean, 10)

clusters_kendall <- rowData(tse)$hclustKendall
head(clusters_kendall, 10)
```

To better visualize the results and the distribution of the clusters, we can 
plot the histogram of the clusters.

```{r taxa_clustering_histogram}
library(ggplot2)
library(patchwork) # TO arrange several plots as a grid
plot1 <- ggplot(as.data.frame(rowData(tse)), aes(x = clusters_euclidean)) +
    geom_bar() +
    labs(title = "CAG size distribution (Euclidean distance)",
         x = "Clusters", y = "Feature count (n)")
plot2 <- ggplot(as.data.frame(rowData(tse)), aes(x = clusters_kendall)) +
    geom_bar() +
    labs(title = "CAG size distribution (1 - tau)",
         x = "Clusters", y = "Feature count (n)")
plot1 + plot2 + plot_layout(ncol = 2)
```

It's also possible to merge the rows by cluster.

```{r taxa_clustering_row_merge}
# Aggregate clusters as a sum of each cluster values
tse_merged <- mergeFeatures(tse, clusters_euclidean)
tse_merged
```
We can note that it worked as planned since there were 5 clusters and there are
now 5 rows.

## Data transformation {#sec-assay-transform}

Data transformations are common in microbiome analysis. Examples
include the logarithmic transformation, calculation of relative
abundances (percentages), and compositionality-aware transformations
such as the centered log-ratio transformation (clr).

In mia package, transformations are applied to abundance data. The transformed 
abundance table is stored back to 'assays'. mia includes transformation 
function ('transformAssay()') which applies sample-wise or column-wise 
transformation when MARGIN = 'samples', feature-wise or row-wise transformation 
when MARGIN = 'features'.

For a complete list of available transformations and parameters, see function 
[help](https://microbiome.github.io/mia/reference/transformAssay.html).

```{r}
tse <- tseGlobalPatterns
tse <- transformAssay(tse, assay.type = "counts", method = "relabundance", pseudocount = 1)
tse <- transformAssay(x = tse, assay.type = "relabundance", method = "clr", 
                      pseudocount = TRUE, name = "clr")

head(assay(tse, "clr"))
```

-   In 'pa' transformation, abundance table is converted to present/absent table.

```{r}
tse <- transformAssay(tse, method = "pa")

head(assay(tse, "pa"))
```

```{r}
# list of abundance tables that assays slot contains
assays(tse)
```
